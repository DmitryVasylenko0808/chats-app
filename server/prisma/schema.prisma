generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  email       String  @unique
  name        String
  description String?
  avatar      String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chats             Chat[]
  messages          Message[]
  reactions         Reaction[]
  bookmarks         Bookmark[]
  notifications     Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("SenderNotifications")

  @@map("users")
}

model Chat {
  id       Int       @id @default(autoincrement())
  members  User[]
  messages Message[]

  @@map("chats")
}

model Message {
  id       Int      @id @default(autoincrement())
  senderId Int?     @map("sender_id")
  sender   User?    @relation(fields: [senderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  chatId   Int      @map("chat_id")
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text     String?
  images   String[]
  isPinned Boolean  @default(false)

  replyToId      Int?      @map("reply_to_id")
  replyToMessage Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  replies        Message[] @relation("MessageReplies")

  forwardedMessageId Int?      @map("forwarded_message_id")
  forwardedMessage   Message?  @relation("MessageForwards", fields: [forwardedMessageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  forwards           Message[] @relation("MessageForwards")

  reactions Reaction[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("messages")
}

model Reaction {
  id    Int    @id @default(autoincrement())
  emoji String

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageId Int     @map("message_id")
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, messageId])
  @@map("reactions")
}

model Bookmark {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageId Int     @map("message_id")
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("bookmarks")
}

model Notification {
  id         Int              @id @default(autoincrement())
  type       NotificationType
  isRead     Boolean          @default(false) @map("is_read")
  entityId   Int?
  entityType EntityType?
  data       Json?
  createdAt  DateTime         @default(now())

  userId Int  @map("user_id")
  user   User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  senderId Int?  @map("sender_id")
  sender   User? @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  NEW_MESSAGE
  NEW_CHAT
}

enum EntityType {
  MESSAGE
  CHAT
}
